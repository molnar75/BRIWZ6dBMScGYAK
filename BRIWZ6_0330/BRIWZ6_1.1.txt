//1.1
var q1 = Customers.Select(c => new {name = c.FullName, age = c.Age}).OrderBy(c => c.age);
q1.Dump();

//1.2
var q2 = Customers.Where(c => c.Age > 28).OrderByDescending(c => c.FullName);
q2.Dump();

//1.3
var q3 = Products.Where(p => p.Category.Contains("hÃ¡z"));
q3.Dump();

//1.4
var maxValue = Products.Max(p => p.Price);
var q4 = Products
			.Where(p => p.Price == maxValue)
			.Select( p => new {
				productName = p.ProductName, price = p.Price
			});
q4.Dump();

//1.5
var avgPrice = Math.Round((double) Products.Average(p => p.Price));
avgPrice.Dump();

var q5 = Products
			.Where(p => p.Price < avgPrice)
			.Select( p => new {
				productName = p.ProductName, price = p.Price
			});
q5.Dump();

//1.6
var q6 = Products.Where(p => p.Category == "divat").Count();
q6.Dump();

//1.7
var q7 = Orders
			.Join(Orderproducts, o => o.Id, op => op.OrderId, (o, op) => new {o, op})
			.Join(Products, oop => oop.op.ProductId, p => p.Id, (oop, p) => new {oop, p})
			.GroupBy(result => result.oop.o.Id)
			.Select(
				groups => new {
					orderId = groups.Key,
					count = groups.Select(g => g.p.Price).Aggregate((p1, p2) => (p1 + p2))
				}
			);
q7.Dump();

//1.8
var q8 = Customers
			.Join(Orders, c => c.Id, o => o.Customer, (c, o) => new {c, o})
			.Join(Orderproducts, oc => oc.o.Id, op => op.OrderId, (oc, op) => new {oc, op})
			.Join(Products, ocop => ocop.op.ProductId, p => p.Id, (ocop, p) => new {ocop, p})
			.GroupBy(result => result.ocop.oc.c.FullName)
			.Select(groups => new {fullName = groups.Key, count = groups.Count()});
q8.Dump();